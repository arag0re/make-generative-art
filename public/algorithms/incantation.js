function setup() { createCanvas(HW, HW), BDI() } function draw() { for (i of (clear(), background(II[6], II[16], II[26]), II[5] % 16 <= 1 && background(0), NCA)) mmm(i), i.draw() } function mmm(n) { n.id % 11 == 4 && BB[23] && BB[24] && (n.color = color(255, 215, int(255 * sin(.01 * frameCount)))), n.id % 18 == 4 && (n.color = color(int(255 * sin(.01 * frameCount)), int(255 * sin(.01 * frameCount)), int(255 * sin(.01 * frameCount)))), n.id % 7 == 4 && BB[61] && BB[21] && SZR <= 8 && (n.color = color(int(255 * sin(.01 * (255 + frameCount))), int(255 * sin(.01 * (255 - frameCount))), int(255 * sin(.01 * frameCount)))), SZR >= 12 && BB[25] && BB[26] && BB[27] && (n.color = color(0, int(255 * sin(.1 * frameCount)), 0)), n.x > HW / 4 && n.x < HW / 3 && SZR >= 12 && BB[28] && BB[29] && (n.color = color(0, int(255 * sin(.1 * frameCount)), 0)), SZR >= 12 && n.x == n.y && BB[30] && BB[31] && (n.color = color(0, int(255 * sin(.1 * frameCount)), 0)), 8 == SZR && n.id % 2 == 1 && BB[21] && BB[22] && BB[23] && BB[24] && (n.color = color(int(255 * sin(.1 * frameCount)))), 4 == SZR && n.id % 2 == 0 && BB[40] && BB[41] && BB[7] && (n.x > HW + HW / 6 ? n.x = 0 - HW / 8 : n.x++), 4 == SZR && n.id % 2 == 1 && BB[42] && BB[43] && BB[7] && (n.y > HW + HW / 6 ? n.y = 0 - HW / 16 : n.y++), 8 == SZR && n.id % 2 == 0 && BB[44] && BB[45] && BB[7] && (n.x > HW + HW / 6 ? n.x = 0 - HW / 8 : n.x++), 8 == SZR && n.id % 2 == 1 && BB[46] && BB[47] && BB[7] && (n.y > HW + HW / 6 ? n.y = 0 - HW / 16 : n.y++), n.id % 9 == 3 && BB[50] && BB[51] && BB[52] && (n.color = color(0, int(255 * sin(.1 * frameCount)), 0)) } function BDI() { for (IDC = 1, X = 0 - HW / 20; X <= HW + HW / 20; X += HW / 12)for (Y = 0 - HW / 20; Y <= HW + HW / 20; Y += HW / 12)r = new rune(X, Y), X == Y && BB[8] ? r.cMM(color(II[6], II[7], II[8], rnd.next().value)) : X == Y && BB[12] && BB[13] && BB[14] && BB[15] && SZR < 20 && r.cMM(color(0)), BB[10] && BB[11] && BB[12] && BB[13] && SZR < 20 && r.cMM(color(255)), r.id = IDC++, NCA.push(r) } function* aBR() { for (i = 1; i < II.length; i++)yield II[i], i == II.length - 1 && (i = 1) } function rune(n, i, o) { this.x = n, this.y = i, this.size = HW / (6e4 / SZR), this.char = Object.keys(lDD)[rnd.next().value % Object.keys(lDD).length], this.color = o || color(rnd.next().value, rnd.next().value, rnd.next().value, rnd.next().value), this.draw = function () { push(); let n = lDD[this.char]; fill(this.color), noStroke(), beginShape(); for (let i = 0; i < n.length; i++)for (let o = 0; o < n[i].length; o += 2) { let t = this.size * n[i][o] + this.x, O = this.size * n[i][o + 1] + this.y, r = this.size * n[i][(o + 2) % n[i].length] + this.x, e = this.size * n[i][(o + 3) % n[i].length] + this.y; vertex(t, O), vertex(r, e) } endShape(CLOSE), pop() }, this.cMM = function (n) { this.color = n } } seed = tokenData.hash, BB = seed.split("").map(n => parseInt(Number("0x" + n), 10) % 2), II = seed.match(/.{2}/g).map(n => parseInt(Number("0x" + n), 10)), HW = Math.min(window.innerWidth, window.innerHeight), NCA = [], rnd = aBR(), fSS = '{"ᚨ":[[-110,-250,-55,-250,110,-155,82,-107,-55,-186,-55,-83,110,12,82,60,-55,-19,-55,250,-110,250,-110,-250]],"‍":[[-69,-139,-14,-194,-69,-250,-42,-250,0,-208,42,-250,69,-250,14,-194,69,-139,42,-139,14,-167,14,250,-14,250,-14,-167,-42,-139,-69,-139]],"ᛸ":[[180,250,0,69,-180,250,-218,212,-27,21,-27,-250,27,-250,27,21,218,212,180,250]],"ᛷ":[[20,-25,-125,-109,-125,229,-179,229,-179,-250,-125,-250,-125,-170,59,-64,179,223,133,250,20,-25]],"ᛶ":[[-119,152,-32,0,-160,-223,-113,-250,0,-55,72,-179,119,-152,32,0,160,223,113,250,0,55,-72,179,-119,152]],"ᛵ":[[-71,-143,36,-250,71,-214,0,-143,71,-71,0,0,71,71,0,143,71,214,36,250,-71,143,0,71,-71,0,0,-71,-71,-143]],"ᛴ":[[195,-24,139,-9,139,250,83,250,83,6,-83,51,-83,111,-139,111,-139,66,-181,77,-195,24,-139,9,-139,-250,-83,-250,-83,-6,83,-51,83,-111,139,-111,139,-66,181,-77,195,-24]],"ᛲ":[[167,-250,167,56,111,56,-111,-111,-111,250,-167,250,-167,-194,-111,-194,111,-28,111,-250,167,-250]],"ᛮ":[[-28,250,-28,-31,-165,48,-192,0,-28,-95,-28,-250,0,-250,193,-139,165,-91,28,-170,28,250,-28,250]],"᛭":[[-27,-32,-27,-96,-90,-160,0,-250,90,-160,37,-107,37,-32,101,-32,160,-90,250,0,160,90,101,32,37,32,37,107,90,160,0,250,-90,160,-27,96,-27,32,-101,32,-160,90,-250,0,-160,-90,-101,-32,-27,-32]],"ᛪ":[[-194,-194,-139,-194,-139,-250,-83,-250,-83,-194,-28,-194,-28,-139,-83,-139,-83,-24,115,-139,139,-139,139,139,194,139,194,194,139,194,139,250,83,250,83,194,28,194,28,139,83,139,83,-57,-111,56,-139,56,-139,-139,-194,-139,-194,-194]],"ᛩ":[[-172,-83,117,-250,172,-250,172,250,117,250,117,83,-172,-83],[117,-186,-61,-83,117,19,117,-186]],"ᛨ":[[-29,170,-29,-170,-166,-91,-193,-139,-1,-250,193,-139,166,-91,29,-170,29,170,166,91,193,139,1,250,-193,139,-166,91,-29,170]],"ᛥ":[[167,186,167,-186,0,-90,-167,-186,-167,186,0,90,167,186],[-222,-250,-167,-250,0,-154,167,-250,222,-250,222,250,167,250,0,154,-167,250,-222,250,-222,-250]],"ᛓ":[[-55,123,-55,250,-110,250,-110,-250,-55,-250,-55,-108,82,-187,110,-139,-55,-44,-55,59,82,-20,110,28,-55,123]],"ᛏ":[[29,250,-29,250,-29,-170,-166,-91,-193,-139,-1,-250,193,-139,166,-91,29,-170,29,250]],"ᛎ":[[-37,-215,37,-215,37,112,214,10,250,72,1,215,-250,72,-214,10,-37,112,-37,-215]],"ᛊ":[[60,250,-99,102,3,0,-99,-102,60,-250,99,-212,-22,-102,80,0,-22,102,99,211,60,250]],"ᛉ":[[-180,-250,-27,-97,-27,-236,27,-236,27,-97,180,-250,218,-212,27,-21,27,250,-27,250,-27,-21,-218,-212,-180,-250]],"ᛈ":[[-144,250,-144,-250,-117,-250,0,-183,117,-250,144,-202,0,-119,-89,-170,-89,170,0,119,144,202,117,250,0,183,-117,250,-144,250]],"ᛇ":[[-27,-250,28,-250,193,-155,165,-107,28,-186,28,250,-27,250,-192,155,-165,106,-27,186,-27,-250]],"ᛃ":[[-228,-65,-44,-250,2,-204,-136,-65,2,73,-44,119,-228,-65],[-2,-73,44,-119,228,65,44,250,-2,204,136,65,-2,-73]],"ᚼ":[[-154,-121,-28,-48,-28,-250,28,-250,28,-48,154,-121,182,-73,56,0,182,73,154,121,28,48,28,250,-28,250,-28,48,-154,121,-182,73,-56,0,-182,-73,-154,-121]],"ᚻ":[[-139,-250,-139,-139,139,-28,139,-250,194,-250,194,250,139,250,139,139,-139,28,-139,250,-194,250,-194,-250,-139,-250],[139,83,139,28,-139,-83,-139,-28,139,83]],"ᚹ":[[-172,-250,-117,-250,172,-83,-117,83,-117,250,-172,250,-172,-250],[-117,19,61,-83,-117,-186,-117,19]],"ᚳ":[[-163,239,-163,-250,-109,-250,-109,-60,163,212,125,250,-109,17,-109,239,-163,239]],"ᚱ":[[-66,19,8,-116,-93,-173,-93,234,-147,234,-147,-250,-120,-250,68,-142,68,-116,-4,19,147,223,100,250,-66,19]],"ᚰ":[[-182,157,-28,68,-28,-35,-155,38,-182,-10,-28,-99,-28,-250,28,-250,28,-167,28,-167,28,-132,155,-205,182,-157,28,-68,28,250,-28,250,-28,167,-28,167,-28,132,-155,205,-182,157]],"ᚯ":[[-182,157,-28,68,-28,-35,-155,38,-182,-10,-28,-99,-28,-250,28,-250,28,-167,28,-167,28,-132,155,-205,182,-157,28,-68,28,35,155,-38,182,10,28,99,28,250,-28,250,-28,167,-28,167,-28,132,-155,205,-182,157]],"ᚪ":[[100,-89,74,-43,-126,-159,-126,-10,100,120,74,165,-126,50,-126,250,-178,250,-178,-219,-126,-219,55,-115,133,-250,178,-224,100,-89]],"ᚩ":[[-126,-159,-126,-10,55,94,133,-42,178,-16,100,120,74,165,-126,50,-126,250,-178,250,-178,-219,-126,-219,55,-115,133,-250,178,-224,100,-89,74,-43,-126,-159]],"ᛕ":[[-119,248,-119,-248,-64,-248,-64,-81,77,-250,119,-214,-61,0,119,215,77,250,-64,81,-64,248,-119,248]],"ᛝ":[[-156,214,-36,94,-130,0,-36,-95,-156,-214,-120,-250,0,-130,120,-250,156,-214,36,-95,130,0,36,94,156,214,120,250,0,130,-120,250,-156,214],[59,0,0,-59,-59,0,0,58,59,0]],"ᛟ":[[99,-78,0,-177,-99,-78,0,20,99,-78],[0,93,-157,250,-193,213,-37,57,-172,-78,0,-250,172,-78,37,57,193,213,157,250,0,93]],"ᛠ":[[-107,-120,1,-228,107,-120,214,-228,250,-192,107,-49,26,-130,26,228,-25,228,-25,-131,-107,-49,-250,-192,-214,-228,-107,-120]],"᛬":[[104,146,0,250,-104,146,0,43,104,146],[104,-146,0,-43,-104,-146,0,-250,104,-146]]} ', lDD = JSON.parse(fSS), SZR = BB[1] && BB[2] ? 12 : BB[3] && BB[4] && BB[5] ? 20 : BB[6] ? 8 : 4;