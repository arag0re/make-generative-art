{"version":3,"sources":["components/AlgorithmKeys.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["algorithmKeys","Abstraction","Andradite","Antennas","Apparitions","Archetype","Asterisms","Brushpops","CENTURY","Calendart","CatBlocks","Cells","CryptoGodKing","Cryptoblots","Divisions","Dreams","Eccentrics","Ecumenopolis","Elementals","Empyrean","Enchiridion","EnergySculpture","Ensō","Fidenza","Flowers","Frammenti","Gazettes","Gizmobotz","Hashtractors","Hieroglyphs","HyperHash","Incantation","Inspirals","Labyrometry","Neighborhood","Nucleus","Orthogone","Pathfinders","Petri","Portal","PrimiDance","Radiance","Rapture","Return","Rhythm","Rinascita","Ringers","Sentience","Sigils","Spaghettification","Stroming","Subscapes","Synapses","Tangled","Timepiece","Traversals","Trossets","Unigrids","autoRAD","planets","getAlgorithmValue","key","obj","getValue","NavDropdownTitle","styled","span","Navigation","props","Navbar","bg","variant","Container","Brand","href","NavDropdown","title","id","className","menuVariant","Object","keys","map","Item","as","onClick","handleSetAlgorithm","ButtonDiv","div","StyledButton","Button","Description","p","generateRandom","randomSeed","Math","floor","random","randomSeedString","ethers","hexlify","keccak256","App","React","useState","setLoaded","initSeed","seed","setSeed","initAlgorithm","algorithm","setAlgorithm","initImageHTML","generateHTML","imageHTML","setImageHTML","console","log","newRNG","fluid","Row","window","width","innerWidth","height","innerHeight","getWindowDimensions","srcDoc","scrolling","frameBorder","allowFullScreen","sandbox","allow","onLoad","handleGenerate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f43cb88c.chunk.js","sourcesContent":["const algorithmKeys = {\n  \"70s Pop Ghost Bonus Pack 👻\": \"70s_pop_ghost_bonus_pack_👻.js\",\n  \"70s Pop Series Two\": \"70s_pop_series_two.js\",\n  Abstraction: \"abstraction.js\",\n  \"Aerial View\": \"aerial_view.js\",\n  \"Alien Clock\": \"alien_clock.js\",\n  \"Alien Insects\": \"alien_insects.js\",\n  Andradite: \"andradite.js\",\n  Antennas: \"antennas.js\",\n  Apparitions: \"apparitions.js\",\n  Archetype: \"archetype.js\",\n  Asterisms: \"asterisms.js\",\n  \"Breathe You\": \"breathe_you.js\",\n  Brushpops: \"brushpops.js\",\n  CENTURY: \"century.js\",\n  Calendart: \"calendart.js\",\n  CatBlocks: \"catblocks.js\",\n  Cells: \"cells.js\",\n  \"Chromie Squiggle\": \"chromie_squiggle.js\",\n  \"Color Magic Planets\": \"color_magic_planets.js\",\n  \"Color Study\": \"color_study.js\",\n  CryptoGodKing: \"cryptogodking.js\",\n  Cryptoblots: \"cryptoblots.js\",\n  \"Cyber Cities\": \"cyber_cities.js\",\n  \"Dear Hash,\": \"dear_hash,.js\",\n  Divisions: \"divisions.js\",\n  \"Dot Grid\": \"dot_grid.js\",\n  \"Dot Matrix Gradient Study\": \"dot_matrix_gradient_study.js\",\n  Dreams: \"dreams.js\",\n  \"Dynamic Slices\": \"dynamic_slices.js\",\n  Eccentrics: \"eccentrics.js\",\n  Ecumenopolis: \"ecumenopolis.js\",\n  Elementals: \"elementals.js\",\n  \"Elevated Deconstructions\": \"elevated_deconstructions.js\",\n  Empyrean: \"empyrean.js\",\n  Enchiridion: \"enchiridion.js\",\n  EnergySculpture: \"energysculpture.js\",\n  Ensō: \"ensō.js\",\n  \"Event Horizon Sunset (Series C)\": \"event_horizon_sunset_(series_c).js\",\n  \"Fake Internet Money\": \"fake_internet_money.js\",\n  Fidenza: \"fidenza.js\",\n  Flowers: \"flowers.js\",\n  Frammenti: \"frammenti.js\",\n  Gazettes: \"gazettes.js\",\n  \"Gen 2\": \"gen_2.js\",\n  \"Gen 3\": \"gen_3.js\",\n  Gizmobotz: \"gizmobotz.js\",\n  \"Good Vibrations\": \"good_vibrations.js\",\n  \"Gravity 12\": \"gravity_12.js\",\n  \"Gravity Grid\": \"gravity_grid.js\",\n  Hashtractors: \"hashtractors.js\",\n  Hieroglyphs: \"hieroglyphs.js\",\n  \"High Tide\": \"high_tide.js\",\n  HyperHash: \"hyperhash.js\",\n  \"I Saw It in a Dream\": \"i_saw_it_in_a_dream.js\",\n  Incantation: \"incantation.js\",\n  Inspirals: \"inspirals.js\",\n  Labyrometry: \"labyrometry.js\",\n  \"LeWitt Generator Generator\": \"lewitt_generator_generator.js\",\n  \"Libertad Parametrizada\": \"libertad_parametrizada.js\",\n  \"Low Tide\": \"low_tide.js\",\n  Neighborhood: \"neighborhood.js\",\n  Nucleus: \"nucleus.js\",\n  \"Octo Garden\": \"octo_garden.js\",\n  \"Ode to Roy\": \"ode_to_roy.js\",\n  \"Organized Disruption\": \"organized_disruption.js\",\n  \"Origami Dream\": \"origami_dream.js\",\n  Orthogone: \"orthogone.js\",\n  \"Panelscape 🅰🅱\": \"panelscape_🅰🅱.js\",\n  \"Paper Armada\": \"paper_armada.js\",\n  \"Patchwork Saguaros\": \"patchwork_saguaros.js\",\n  Pathfinders: \"pathfinders.js\",\n  \"Patterns of Life\": \"patterns_of_life.js\",\n  Petri: \"petri.js\",\n  Portal: \"portal.js\",\n  PrimiDance: \"primidance.js\",\n  Radiance: \"radiance.js\",\n  Rapture: \"rapture.js\",\n  Return: \"return.js\",\n  Rhythm: \"rhythm.js\",\n  Rinascita: \"rinascita.js\",\n  Ringers: \"ringers.js\",\n  \"Scribbled Boundaries\": \"scribbled_boundaries.js\",\n  Sentience: \"sentience.js\",\n  Sigils: \"sigils.js\",\n  \"Space Debris [m'aider]\": \"space_debris_[m'aider].js\",\n  \"Space Debris [ravaged]\": \"space_debris_[ravaged].js\",\n  \"Space Debris [warning]\": \"space_debris_[warning].js\",\n  Spaghettification: \"spaghettification.js\",\n  \"Speckled Summits\": \"speckled_summits.js\",\n  \"Star Flower\": \"star_flower.js\",\n  \"Stipple Sunsets\": \"stipple_sunsets.js\",\n  Stroming: \"stroming.js\",\n  Subscapes: \"subscapes.js\",\n  Synapses: \"synapses.js\",\n  \"Talking Blocks\": \"talking_blocks.js\",\n  Tangled: \"tangled.js\",\n  \"The Blocks of Art\": \"the_blocks_of_art.js\",\n  \"The Opera\": \"the_opera.js\",\n  Timepiece: \"timepiece.js\",\n  Traversals: \"traversals.js\",\n  Trossets: \"trossets.js\",\n  Unigrids: \"unigrids.js\",\n  \"Unknown Signals\": \"unknown_signals.js\",\n  \"Variant Plan\": \"variant_plan.js\",\n  \"View Card\": \"view_card.js\",\n  \"Watercolor Dreams\": \"watercolor_dreams.js\",\n  \"Wave Schematics\": \"wave_schematics.js\",\n  \"[Dis]entanglement\": \"[dis]entanglement.js\",\n  autoRAD: \"autorad.js\",\n  \"glitch crystal monsters\": \"glitch_crystal_monsters.js\",\n  planets: \"planets.js\",\n  \"sail-o-bots\": \"sail-o-bots.js\",\n};\n\nconst getValue = (key: any) => (obj: any) => obj[key];\n\nexport const getAlgorithmValue = (key: string) => {\n  return getValue(key)(algorithmKeys);\n};\n\nexport const AlgorithmKeys = () => {\n  return Object.keys(algorithmKeys);\n};\n","import Container from \"react-bootstrap/Container\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { AlgorithmKeys } from \"./AlgorithmKeys\";\nimport styled from \"styled-components\";\n\ninterface NavInterface {\n  handleSetAlgorithm: (algorithm: string) => void;\n}\n\nconst NavDropdownTitle = styled.span`\n  color: white !important;\n  font-size: 16px;\n`;\n\nconst Navigation = (props: NavInterface) => {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Navbar.Brand href=\"/make-generative-art/\">\n            Make Generative Art\n          </Navbar.Brand>\n\n          <NavDropdown\n            title={<NavDropdownTitle>Choose Algorithm</NavDropdownTitle>}\n            id=\"navbarScrollingDropdown\"\n            className=\"me-auto\"\n            menuVariant=\"dark\"\n          >\n            {AlgorithmKeys().map((key) => (\n              <NavDropdown.Item\n                as=\"button\"\n                onClick={() => props.handleSetAlgorithm(key)}\n              >\n                {key}\n              </NavDropdown.Item>\n            ))}\n          </NavDropdown>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport * as ethers from \"ethers\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport \"./App.css\";\nimport Navigation from \"./components/Navbar\";\nimport { getAlgorithmValue } from \"./components/AlgorithmKeys\";\n\nconst ButtonDiv = styled.div`\n  margin-top: 30px;\n  text-align: center;\n`;\n\nconst StyledButton = styled(Button)`\n  width: 250px;\n  height: 50px;\n  object-fit: none;\n`;\n\nconst Description = styled.p`\n  margin-top: 20px;\n`;\n\nfunction generateRandom() {\n  let randomSeed = Math.floor(Math.random() * 10000000000000);\n  let randomSeedString = ethers.utils.hexlify(randomSeed);\n  return ethers.utils.keccak256(randomSeedString);\n}\n\nfunction App() {\n  const [loaded, setLoaded] = React.useState(0);\n\n  let initSeed = generateRandom();\n  const [seed, setSeed] = React.useState(initSeed);\n\n  let initAlgorithm = getAlgorithmValue(\"Chromie Squiggle\");\n  const [algorithm, setAlgorithm] = React.useState(initAlgorithm);\n\n  let initImageHTML = generateHTML(algorithm, seed);\n  const [imageHTML, setImageHTML] = React.useState(initImageHTML);\n\n  function handleSetAlgorithm(algorithm: string) {\n    let newRNG = generateRandom();\n    setSeed(newRNG);\n    setAlgorithm(getAlgorithmValue(algorithm));\n    setImageHTML(generateHTML(getAlgorithmValue(algorithm), newRNG));\n  }\n\n  function handleGenerate() {\n    let newRNG = generateRandom();\n    setSeed(newRNG);\n    setImageHTML(generateHTML(algorithm, newRNG));\n  }\n\n  function getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width,\n      height,\n    };\n  }\n\n  console.log(seed);\n\n  function generateHTML(algorithm: string, seed: string) {\n    let rawHTML = `<!DOCTYPE html>\n  <html lang=\"en\">\n\t  <head>\n\t  <meta charset=\"UTF-8\" />\n\t  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t  <title>Document</title>\n\t  <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.js\"></script>\n\t  </head>\n  \n\t  <body></body>\n\t  <script>\n\t\t  let tokenData = {\n\t\t\t  hash: \"${seed}\",\n\t\t\t  hashes: [\"${seed}\"],\n\t\t  };\n\t  </script>\n\t  <script src=\"algorithms/${algorithm}\"></script>\n  </html>\n\t  `;\n\n    return rawHTML;\n  }\n\n  function renderIFrame() {\n    let dims = getWindowDimensions();\n    let width = dims[\"width\"];\n    if (width < 600) {\n      return (\n        <iframe\n          title=\"ArtBlocks\"\n          height=\"400\"\n          srcDoc={imageHTML}\n          scrolling=\"no\"\n          frameBorder={0}\n          allowFullScreen\n          sandbox=\"allow-scripts\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          onLoad={() => setLoaded(1)}\n        ></iframe>\n      );\n    } else {\n      return (\n        <iframe\n          title=\"ArtBlocks\"\n          height=\"700\"\n          srcDoc={imageHTML}\n          scrolling=\"no\"\n          frameBorder={0}\n          allowFullScreen\n          sandbox=\"allow-scripts\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          onLoad={() => setLoaded(1)}\n        ></iframe>\n      );\n    }\n  }\n\n  return (\n    <>\n      <Navigation handleSetAlgorithm={handleSetAlgorithm} />\n      <Container fluid>\n        <Row>{renderIFrame()}</Row>\n\n        <ButtonDiv>\n          <StyledButton variant=\"dark\" onClick={() => handleGenerate()}>\n            Generate\n          </StyledButton>\n          <Description>\n            This was generated using the seed\n            <br />\n            <i>{seed}</i>\n          </Description>\n\n          <Description>\n            Save this string if you like the art. <br />\n            It is the only way to re-generate the same piece.\n          </Description>\n        </ButtonDiv>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}